require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe QuicknotesController do

  def mock_quicknote(stubs={})
    @mock_quicknote ||= mock_model(Quicknote, stubs).as_null_object
  end

  describe "GET index" do
    it "assigns all quicknotes as @quicknotes" do
      Quicknote.stub(:all) { [mock_quicknote] }
      get :index
      assigns(:quicknotes).should eq([mock_quicknote])
    end
  end

  describe "GET show" do
    it "assigns the requested quicknote as @quicknote" do
      Quicknote.stub(:find).with("37") { mock_quicknote }
      get :show, :id => "37"
      assigns(:quicknote).should be(mock_quicknote)
    end
  end

  describe "GET new" do
    it "assigns a new quicknote as @quicknote" do
      Quicknote.stub(:new) { mock_quicknote }
      get :new
      assigns(:quicknote).should be(mock_quicknote)
    end
  end

  describe "GET edit" do
    it "assigns the requested quicknote as @quicknote" do
      Quicknote.stub(:find).with("37") { mock_quicknote }
      get :edit, :id => "37"
      assigns(:quicknote).should be(mock_quicknote)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "assigns a newly created quicknote as @quicknote" do
        Quicknote.stub(:new).with({'these' => 'params'}) { mock_quicknote(:save => true) }
        post :create, :quicknote => {'these' => 'params'}
        assigns(:quicknote).should be(mock_quicknote)
      end

      it "redirects to the created quicknote" do
        Quicknote.stub(:new) { mock_quicknote(:save => true) }
        post :create, :quicknote => {}
        response.should redirect_to(quicknote_url(mock_quicknote))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved quicknote as @quicknote" do
        Quicknote.stub(:new).with({'these' => 'params'}) { mock_quicknote(:save => false) }
        post :create, :quicknote => {'these' => 'params'}
        assigns(:quicknote).should be(mock_quicknote)
      end

      it "re-renders the 'new' template" do
        Quicknote.stub(:new) { mock_quicknote(:save => false) }
        post :create, :quicknote => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested quicknote" do
        Quicknote.stub(:find).with("37") { mock_quicknote }
        mock_quicknote.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => "37", :quicknote => {'these' => 'params'}
      end

      it "assigns the requested quicknote as @quicknote" do
        Quicknote.stub(:find) { mock_quicknote(:update_attributes => true) }
        put :update, :id => "1"
        assigns(:quicknote).should be(mock_quicknote)
      end

      it "redirects to the quicknote" do
        Quicknote.stub(:find) { mock_quicknote(:update_attributes => true) }
        put :update, :id => "1"
        response.should redirect_to(quicknote_url(mock_quicknote))
      end
    end

    describe "with invalid params" do
      it "assigns the quicknote as @quicknote" do
        Quicknote.stub(:find) { mock_quicknote(:update_attributes => false) }
        put :update, :id => "1"
        assigns(:quicknote).should be(mock_quicknote)
      end

      it "re-renders the 'edit' template" do
        Quicknote.stub(:find) { mock_quicknote(:update_attributes => false) }
        put :update, :id => "1"
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested quicknote" do
      Quicknote.stub(:find).with("37") { mock_quicknote }
      mock_quicknote.should_receive(:destroy)
      delete :destroy, :id => "37"
    end

    it "redirects to the quicknotes list" do
      Quicknote.stub(:find) { mock_quicknote }
      delete :destroy, :id => "1"
      response.should redirect_to(quicknotes_url)
    end
  end

end
