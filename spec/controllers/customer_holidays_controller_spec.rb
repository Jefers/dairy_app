require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe CustomerHolidaysController do

  def mock_customer_holiday(stubs={})
    @mock_customer_holiday ||= mock_model(CustomerHoliday, stubs).as_null_object
  end

  describe "GET index" do
    it "assigns all customer_holidays as @customer_holidays" do
      CustomerHoliday.stub(:all) { [mock_customer_holiday] }
      get :index
      assigns(:customer_holidays).should eq([mock_customer_holiday])
    end
  end

  describe "GET show" do
    it "assigns the requested customer_holiday as @customer_holiday" do
      CustomerHoliday.stub(:find).with("37") { mock_customer_holiday }
      get :show, :id => "37"
      assigns(:customer_holiday).should be(mock_customer_holiday)
    end
  end

  describe "GET new" do
    it "assigns a new customer_holiday as @customer_holiday" do
      CustomerHoliday.stub(:new) { mock_customer_holiday }
      get :new
      assigns(:customer_holiday).should be(mock_customer_holiday)
    end
  end

  describe "GET edit" do
    it "assigns the requested customer_holiday as @customer_holiday" do
      CustomerHoliday.stub(:find).with("37") { mock_customer_holiday }
      get :edit, :id => "37"
      assigns(:customer_holiday).should be(mock_customer_holiday)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "assigns a newly created customer_holiday as @customer_holiday" do
        CustomerHoliday.stub(:new).with({'these' => 'params'}) { mock_customer_holiday(:save => true) }
        post :create, :customer_holiday => {'these' => 'params'}
        assigns(:customer_holiday).should be(mock_customer_holiday)
      end

      it "redirects to the created customer_holiday" do
        CustomerHoliday.stub(:new) { mock_customer_holiday(:save => true) }
        post :create, :customer_holiday => {}
        response.should redirect_to(customer_holiday_url(mock_customer_holiday))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved customer_holiday as @customer_holiday" do
        CustomerHoliday.stub(:new).with({'these' => 'params'}) { mock_customer_holiday(:save => false) }
        post :create, :customer_holiday => {'these' => 'params'}
        assigns(:customer_holiday).should be(mock_customer_holiday)
      end

      it "re-renders the 'new' template" do
        CustomerHoliday.stub(:new) { mock_customer_holiday(:save => false) }
        post :create, :customer_holiday => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested customer_holiday" do
        CustomerHoliday.stub(:find).with("37") { mock_customer_holiday }
        mock_customer_holiday.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => "37", :customer_holiday => {'these' => 'params'}
      end

      it "assigns the requested customer_holiday as @customer_holiday" do
        CustomerHoliday.stub(:find) { mock_customer_holiday(:update_attributes => true) }
        put :update, :id => "1"
        assigns(:customer_holiday).should be(mock_customer_holiday)
      end

      it "redirects to the customer_holiday" do
        CustomerHoliday.stub(:find) { mock_customer_holiday(:update_attributes => true) }
        put :update, :id => "1"
        response.should redirect_to(customer_holiday_url(mock_customer_holiday))
      end
    end

    describe "with invalid params" do
      it "assigns the customer_holiday as @customer_holiday" do
        CustomerHoliday.stub(:find) { mock_customer_holiday(:update_attributes => false) }
        put :update, :id => "1"
        assigns(:customer_holiday).should be(mock_customer_holiday)
      end

      it "re-renders the 'edit' template" do
        CustomerHoliday.stub(:find) { mock_customer_holiday(:update_attributes => false) }
        put :update, :id => "1"
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested customer_holiday" do
      CustomerHoliday.stub(:find).with("37") { mock_customer_holiday }
      mock_customer_holiday.should_receive(:destroy)
      delete :destroy, :id => "37"
    end

    it "redirects to the customer_holidays list" do
      CustomerHoliday.stub(:find) { mock_customer_holiday }
      delete :destroy, :id => "1"
      response.should redirect_to(customer_holidays_url)
    end
  end

end
